// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=in1, sel=instruction[15], out=out1);
    Not(in=instruction[15], out=out2);
	Or(a=instruction[5], b=out2, out=out3);
	ARegister(in=out1, load=out3, out[0]=addressM[0], out[1]=addressM[1], out[2]=addressM[2], out[3]=addressM[3], out[4]=addressM[4], out[5]=addressM[5], out[6]=addressM[6], out[7]=addressM[7], out[8]=addressM[8], out[9]=addressM[9], out[10]=addressM[10], out[11]=addressM[11], out[12]=addressM[12], out[13]=addressM[13], out[14]=addressM[14], out=out4);
	Mux16(a=out4, b=inM, sel=instruction[12], out=out5);
	And(a=instruction[4], b=instruction[15], out=out6);
	DRegister(in=in1, load=out6, out=out7);
	ALU(x=out7, y=out5, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=in1, zr=out8, ng=out9);
	And(a=instruction[3], b=instruction[15], out=writeM);
	Or(a=out8, b=out9, out=out10);
	Not(in=out10, out=out11);
	And(a=instruction[0], b=out11, out=out12);
	And(a=instruction[1], b=out8, out=out13);
	And(a=instruction[2], b=out9, out=out14);
	Or8Way(in[0]=out12, in[1]=out13, in[2]=out14, out=out15);
	And(a=instruction[15], b=out15, out=out16);
	PC(in=out4, load=out16, inc=true, reset=reset, out[0]=pc[0], out[1]=pc[1], out[2]=pc[2], out[3]=pc[3], out[4]=pc[4], out[5]=pc[5], out[6]=pc[6], out[7]=pc[7], out[8]=pc[8], out[9]=pc[9], out[10]=pc[10], out[11]=pc[11], out[12]=pc[12], out[13]=pc[13], out[14]=pc[14]);
}